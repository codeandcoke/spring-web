openapi: 3.0.2
servers:
  - url: /bikes
info:
  description: Esta es la API que vamos a crear en clase
  version: "1.0"
  title: Bikes API
tags:
  - name: bikes
    description: Operaciones para realizar con bicicletas
  - name: routes
    description: Operaciones para cálculo de rutas
  - name: users
    description: Gestión de usuarios
paths:
  /bikes:
    get:
      tags: 
        - bikes
      summary: Listado de bicicletas
      description: Devuelve el listado completo de todas las bicicletas registradas. Es posible filtrar por la estación donde se encuentran
      operationId: getBikes
      parameters:
        - name: station
          in: query
          description: Estación donde está ubicada la bicicleta
          required: false
          schema:
            type: string
            default: 0
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Bike'
        '500':
          description: Error interno del servidor
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
    post:
      tags:
        - bikes
      summary: Registrar una bicicleta
      description: Registra una nueva bicicleta en el sistema
      operationId: postBikes
      requestBody:
        description: Los datos de la nueva bicicleta
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BikeIn'
      responses:
        '201':
          description: Se ha registrado la bicicleta
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Bike'
  /bike/{bikeId}:
    get:
      tags: 
        - bikes
      summary: Obtiene los datos de una bicicleta
      description: Devuelve los datos de una bicicleta determinada
      operationId: getBike
      parameters:
        - name: bikeId
          in: path
          description: Identificador de la bicicleta
          required: true
          schema:
            type: number
            format: int64
            example: 23
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Bike'
        '404':
          description: No se ha encontrado la bicicleta
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFound'
              example:
                internalError: 1
                message: "No se ha podido encontrar la bicicleta"
    delete:
      tags: 
        - bikes
      summary: Da de baja una bicicleta
      description: Da de baja una bicicleta determinada
      operationId: deleteBike
      parameters:
        - name: bikeId
          in: path
          description: Identificador de la bicicleta
          required: true
          schema:
            type: number
            format: int64
            example: 23
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Bike'
        '404':
          description: No se ha encontrado la bicicleta
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFound'
              example:
                internalError: 1
                message: "No se ha podido encontrar la bicicleta"
    put:
      tags: 
        - bikes
      summary: Modifica una bicicleta
      description: Modifica los datos de una bicicleta determinada
      operationId: modifyBike
      parameters:
        - name: bikeId
          in: path
          description: Identificador de la bicicleta que se va a modificar
          required: true
          schema:
            type: number
            format: int64
            example: 23
      requestBody:
        description: Los datos nuevos de la bicicleta
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BikeIn'
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Bike'
        '404':
          description: No se ha encontrado la bicicleta
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFound'
              example:
                internalError: 1
                message: "No se ha podido encontrar la bicicleta"
  /bike/{bikeId}/routes:
    get:
      tags: 
        - bikes
        - routes
      summary: Obtiene las rutas que ha realizado una bicicleta
      description: Obtiene la información de las rutas realizadas por una bicicleta determinada. Es posible filtrar por la distancia recorrida en la ruta
      operationId: getBikeRoutes
      parameters:
        - name: bikeId
          in: path
          description: Identificador de la bicicleta
          required: true
          schema:
            type: number
            format: int64
            example: 23
        - name: distance
          in: query
          description: Longitud de las rutas que se quieren obtener
          required: false
          schema:
            type: number
            format: int32
            default: 0
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RouteDTO'
        '404':
          description: No se ha encontrado la bicicleta
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFound'
              example:
                internalError: 1
                message: "No se ha podido encontrar la bicicleta"
  /routes:
    post:
      tags:
        - routes
      summary: Registra una ruta
      description: Registra una nueva ruta
      operationId: postRoutes
      requestBody:
        description: La información de la nueva ruta
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RouteIn'
      responses:
        '201':
          description: La ruta se ha registrado correctamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RouteDTO'
  /users:
    post:
      tags:
        - users
      summary: Registra un usuario
      description: Registra un nuevo usuario
      operationId: postUsers
      requestBody:
        description: La información del nuevo usuario
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserIn'
      responses:
        '201':
          description: El usuario se ha registrado correctamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
components:
  schemas:
    BikeIn:
      properties:
        available:
          type: boolean
          example: true
        kilometers:
          type: integer
          format: int32
          example: 1030
        babyChair:
          type: boolean
          example: false
        stationId:
          type: integer
          format: int32
          example: 3
      type: object
    Bike:
      allOf:
        - type: object
          properties:
            id:
              type: integer
              format: int64
              example: 23
        - $ref: '#/components/schemas/BikeIn'
    RouteIn:
      properties:
        startDate:
          type: string
          format: date
          example: "2022-02-24"
        endDate:
          type: string
          format: date
          example: "2022-02-25"
        kilometers:
          type: number
          format: int32
          example: 150
        user:
          type: integer
          format: int32
          example: 2
        bike:
          type: integer
          format: int32
          example: 1
      type: object
    RouteDTO:
      allOf:
        - type: object
          properties:
            id:
              type: integer
              format: int64
              example: 23
        - $ref: '#/components/schemas/RouteIn'
    UserIn:
      properties:
        dni:
          type: string
          example: "12345678A"
        name:
          type: string
          example: "José Luis"
        surname:
          type: string
          example: "Ballestin"
        birthDate:
          type: string
          format: date
          example: "1990-01-31"
      type: object
    User:
      allOf:
        - type: object
          properties:
            id:
              type: integer
              format: int64
              example: 23
        - $ref: '#/components/schemas/UserIn'
    ErrorResponse:
      properties:
        internalError:
          type: number
          format: int32
        message:
          type: string
      type: object
    ResourceNotFound:
      allOf:
        - type: object
        - $ref: '#/components/schemas/ErrorResponse'
    InternalServerError:
      allOf:
        - type: object
        - $ref: '#/components/schemas/ErrorResponse'
      example:
        internalError: 999
        message: "Internal Server Error"
    